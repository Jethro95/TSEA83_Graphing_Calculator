#Reserved registers:
#GR0 : input
#GR1 : result
#GR2 : temp shift register
#GR3 : dot shift amount
#GR4 : isparams
#GR5 : isnegative
#GR6 : tmp
#GR7 : tmp

#OUTPUT:
#GR2 : result

#resets registers for new input
reset: LOAD$ 0,0
LOAD$ 1,0
LOAD$ 2,0
LOAD$ 3,0
LOAD$ 4,0
LOAD$ 5,0
LOAD$ 6,0
LOAD$ 7,0

#read input
start: RC 0,0

LOAD$ 3,12  #shift amount for whole number part of fixed point numbers
STORE 3,&shift

#Loop to beginning until input is a valid character
if 0 = $255
	JMP$ 0,&start
endif

if 0 = $42  # '='

    #row++, col=20
    LOAD 6,&row
    ADD$ 6,1
    STORE 6,&row
    LOAD$ 6,20
    STORE 6,&col

    LOAD$ 6,&continue1
    JMP$ 0,&newtileAddr
    continue1: STOREP~ 0,&tileaddr

    #row++, col=0
    LOAD 6,&row
    ADD$ 6,1
    STORE 6,&row
    LOAD$ 6,0
    STORE 6,&col

    STORE 0,&result
	JMP$ 0,&enter
endif

#input is operator
if 0 > $42
    if 0 < $47
        LOAD$ 6,&continue2
        JMP$ 0,&newtileAddr
        continue2: STOREP~ 0,&tileaddr
        #col+2
        LOAD 6,&col
        ADD$ 6,2
        STORE 6,&col            

        STORE 0,&result
	    JMP$ 0,&enter
    endif
endif

if 0 = $33		#If 'X'
    LOAD$ 6,&continue3
    JMP$ 0,&newtileAddr
    continue3: STOREP~ 0,&tileaddr
    #col++
    LOAD 6,&col
    ADD$ 6,1
    STORE 6,&col

	STORE 0,&input
    LOAD 1,&input
    JMP$ 0,&start
endif


#use the 'N' modifier to make input negative (e.g. input 'N5' will save '-5' to memory)
if 0 = $23  #Input = 'N' (negative)
    LOAD$ 6,&continue4
    JMP$ 0,&newtileAddr
    continue4: STOREP~ 0,&tileaddr
    #col++
    LOAD 6,&col
    ADD$ 6,1
    STORE 6,&col    

    LOAD$ 5,1
    JMP$ 0,&start
endif

#use the 'P' modifier to input plot parameters
if 0 = $25  #Input = 'P'
    LOAD$ 6,&continue5
    JMP$ 0,&newtileAddr
    continue5: STOREP~ 0,&tileaddr
    #col+2
    LOAD 6,&col
    ADD$ 6,2
    STORE 6,&col   

    LOAD$ 4,1
    STORE 4,&paraminput
    JMP$ 0,&reset
endif

#dot input
if 0 = $41
    LOAD$ 6,&continue6
    JMP$ 0,&newtileAddr
    continue6: STOREP~ 0,&tileaddr
    #col++
    LOAD 6,&col
    ADD$ 6,1
    STORE 6,&col

    JMP$ 0,&dotfirst
endif

if 0 = $27  #Input = 'R' (clear)
    load$ 7,&clearreset
    JMP$ 0,&clear
endif

#space -> process input
if 0 = $47
    #col+2
    LOAD 6,&col
    ADD$ 6,2
    STORE 6,&col

    if 5 = $1
        STORE 1,&result
        LOAD$ 1,0
        SUB 1,&result
    endif
    JMP$ 0,&done
endif

if 0 < $16		#If numerical
    LOAD$ 6,&continue7
    JMP$ 0,&newtileAddr
    continue7: STOREP~ 0,&tileaddr
    #col++
    LOAD 6,&col
    ADD$ 6,1
    STORE 6,&col

    LSL$ 0,16
	STORE 0,&input
    LSL$ 1,4
    ADD 1,&input
endif

JMP$ 0,&start

#___DOT___

#save whole number part, this will be added back in the end
dotfirst: STORE 1,&heltal
LOAD$ 1,0
dot: RC 0,0	#Read input to GR0

#Loop to beginning until input is a valid character
if 0 = $255
	JMP$ 0,&dot
endif

#space -> process input
if 0 = $47
    #col+2
    LOAD 6,&col
    ADD$ 6,2
    STORE 6,&col
    if 5 = $1   #if negative
        ADD 1,&heltal  #Add whole number to decimal part
        STORE 1,&result
        LOAD$ 1,0
        SUB 1,&result
        #STORE 1,&result
        JMP$ 0,&done
    endif
    
    ADD 1,&heltal
    JMP$ 0,&done
endif

if 0 < $16		#If numerical
    LOAD$ 6,&continue8
    JMP$ 0,&newtileAddr
    continue8: STOREP~ 0,&tileaddr
    #col++
    LOAD 6,&col
    ADD$ 6,1
    STORE 6,&col

    LSL 0,&shift
	STORE 0,&input
    ADD 1,&input
    SUB$ 3,4
    STORE 3,&shift
endif
JMP$ 0,&dot

done: STORE 1,&result
enter: LOAD 2,&result

LOAD 4,&paraminput
if 4 = $1
    LOAD 4,&paramcount
    ADD$ 4,1
    if 4 = $1
        STORE 2,&xmin
    endif
    if 4 = $2
        STORE 2,&xmax
    endif
    if 4 = $3
        STORE 2,&ymin
    endif
    if 4 = $4
        STORE 2,&ymax

        #row++, col=20
        LOAD 6,&row
        ADD$ 6,1
        STORE 6,&row
        LOAD$ 6,20
        STORE 6,&col

        LOAD$ 6,&continue9
        JMP$ 0,&newtileAddr
        continue9: LOAD$ 0,24  #'O'
        STOREP~ 0,&tileaddr
        LOAD 6,&tileaddr
        ADD$ 6,1
        STORE 6,&tileaddr
        LOAD$ 0,20  #'K'
        STOREP~ 0,&tileaddr

        #row++, col=0
        LOAD 6,&row
        ADD$ 6,1
        STORE 6,&row
        LOAD$ 6,0
        STORE 6,&col

        store 0,&gr0backupbitmap
        store 1,&gr1backupbitmap

        load$ 0,153599
        load$ 1,1

        while 0!$0
            store 0,&bitmapaddrreset
            storeb~ 1,&bitmapaddrreset
            sub$ 0,1
        end while

        load 0,&gr0backupbitmap
        load 1,&gr0backupbitmap
        
        JMP$ 0,&ultrareset
    endif

    STORE 4,&paramcount
    LOAD$ 4,1
    STORE 4,&paraminput
    JMP$ 0,&reset
endif
