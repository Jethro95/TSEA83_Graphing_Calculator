#Reserved registers:
#GR0 : input
#GR1 : result
#GR2 : temp shift register
#GR3 : dot shift amount
#GR4 : final result
#GR5 : isnegative

#OUTPUT:
#GR2 : result

#resets program for new calculation loop
ultrareset: LOAD$ 0,0
STORE 0,&input
STORE 0,&heltal
STORE 0,&shift
STORE 0,&result
STORE 0,&opaddr
STORE 0,&curaddr
STORE 0,&loopcounter
 
#resets registers for new input
reset: LOAD$ 0,0
LOAD$ 1,0
LOAD$ 2,0
LOAD$ 3,0
LOAD$ 4,0
LOAD$ 5,0
LOAD$ 6,0

#read input
start: RC 0,0

LOAD$ 3,12  #shift amount for whole number part of fixed point numbers
STORE 3,&shift

#Loop to beginning until input is a valid character
if 0 = $255
	JMP$ 0,&start
endif

if 0 = $42  # '='
    STORE 0,&result
	JMP$ 0,&enter
endif

#input is operator
if 0 > $42
    if 0 < $47
        STORE 0,&result
	    JMP$ 0,&enter
    endif
endif

#use the 'N' modifier to make input negative (e.g. input 'N5' will save '-5' to memory)
if 0 = $23  #Input = 'N' (negative)
    LOAD$ 5,1
    JMP$ 0,&start
endif

#dot input
if 0 = $41
    JMP$ 0,&dotfirst
endif

#space -> process input
if 0 = $47
    if 5 = $1
        STORE 1,&result
        LOAD$ 1,0
        SUB 1,&result
    endif
    JMP$ 0,&done
endif

if 0 < $16		#If numerical
    LSL$ 0,16
	STORE 0,&input
    LSL$ 1,4
    ADD 1,&input
endif
JMP$ 0,&start

#___DOT___

#save whole number part, this will be added back in the end
dotfirst: STORE 1,&heltal
LOAD$ 1,0
dot: RC 0,0	#Read input to GR0

#Loop to beginning until input is a valid character
if 0 = $255
	JMP$ 0,&dot
endif

#space -> process input
if 0 = $47
    if 5 = $1
        ADD 1,&heltal  #Add whole number to decimal part
        STORE 1,&result
        LOAD$ 1,0
        SUB 1,&result
        STORE 1,&result
        JMP$ 0,&done
    endif
    
    ADD 1,&heltal
    JMP$ 0,&done
endif

if 0 < $16		#If numerical
    LSL 0,&shift
	STORE 0,&input
    ADD 1,&input
    SUB$ 3,4
    STORE 3,&shift
endif
JMP$ 0,&dot

done: STORE 1,&result
enter: LOAD 2,&result

#Empty rows for variables
input: SLI 0
heltal: SLI 0
shift: SLI 0
result: SLI 0
