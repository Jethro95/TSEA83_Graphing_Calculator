
#======================
#   TESTS
#======================

# Demo usage of script
load$ 0,&data # start of input
load$ 1,9 # TODO: Change to 3 if other tests
load$ 2,&getbackhere
jmp$ 0,&evaluate
getbackhere: jmp$ 0,&getbackhere

# Test 1+2=3
#data: sli 2
#sli 1
#sli 43 # Plus

# Test 3-1=2
#data: sli 1
#sli 3
#sli 44 # Minus

# Test 2*2=4
#data: sli 131072 #2.0
#sli 131072 #2.0
#sli 45 # Mult

# Test 5 1 2 + 4 * + 3 âˆ’ = 14
# (the one from https://en.wikipedia.org/wiki/Reverse_Polish_notation)
data: sli 5
sli 1
sli 2
sli 43 # Plus
sli 262144 # 4.0
sli 45 # Mult
sli 43 # Plus
sli 3
sli 44 # Minus

#==============================

# HOW TO USE:
# Save start location of input to gr0, number of input values to gr1 and return to gr2
# Jump to &evaluate
# Result will be put in gr0. See below for a list of modified GRx's
# The routine was unsuccesful if Gr1 > 0 after running it.

# GR usage (after parsing arguments):
# 0-addr to top of stack
# 1-stack size
# 2-Next input token
# 4-tmp value storage
# 5-1 if success, 2 if error

#------------------------------

# Start of code

# Load input data
evaluate: store 0,&nextInputLocation
store 1,&inputcount
store 2,&returnaddr

# Setup
load$ 1,0 # Set stack size to 0
load$ 0,&stackstart # Initialize stack pointer
load 6,&inputcount

while 6>$1 #While there are input tokens left

    # Read the next token from input.
    load~ 2,&nextInputLocation
    # Increment nextInputLocation value; go to next input char
    # TODO: It's faster to just always use GR2 rather than
    #           Reading and writing from &nextInputLocation
    load 4,&nextInputLocation
    add$ 4,1
    store 4,&nextInputLocation


    # Check if token is a number or an operator and jump appropriately
    # TODO: Goto's aren't necessary if we implement OR's in sillescript.
    if 2=$43 # plus 
       jmp$ 0,&processOperator
    end if
    if 2=$44 # Minus
       jmp$ 0,&processOperator
    end if
    if 2=$45 # Mult
       jmp$ 0,&processOperator
    end if;
    #Not an operator...
    jmp$ 0,&processNumber

    #---------------------------------
    #     OPERATOR
    #---------------------------------
    #Note: each operator assumes two arguments
    processOperator:if 1<$2 # plus
        # Error, to few values to Evaluate
        load$ 0,0 # Put zero as result
	jmp 0,&returnaddr # Return
    end if

    # We seem to have enough to work with...

    # Load first value from stack to Gr7, stackpointer address to Gr0.
    store 0,&stackpointer
    load~ 7,&stackpointer

    # Find the second argument
    sub$ 0,1 # Decrement stack pointer
    sub$ 1,1 # Decrement stack size
    store 0,&stackpointer #Have &stackpointer point to arg number 2

    #Perform appropriate operation
    #TODO: Doesn't work with addf
    if 2=$43 # plus 
       addf~ 7,&stackpointer
    end if
    if 2=$44 # Minus

       # Minus takes order into consideration.
       # Unfortunately, the order the subf instruction does it in
       # Is the reverse of what we need.

       # To solve this, we need to store the second operand in GRx
       # and the first one in program memory.
       store 7,&tmp # Gr7 -> p_mem
       load~ 7,&stackpointer # p_mem (second operande) -> Gr7

       #Perform the operation, now with proper ordering
       subf 7,&tmp

    end if
    if 2=$45 # Mult
       multf~ 7,&stackpointer
    end if;

    # Save Gr7==result at the point in stack on which the second
    #    arg resided
    # TODO: ~ doesn't work for STORE.
    store~ 7,&stackpointer # Push the returned results to stack

    # Skip number processing
    jmp$ 0,&nextToken
    
    #-------------------------------
    #     NUMBER
    #-------------------------------
    #Not operator, push to stack
    processNumber:add$ 0,1
    add$ 1,1
    store 0,&stackpointer
    store~ 2,&stackpointer
    
    #-------------------------------

    nextToken:sub$ 6,1 # We have read one input token
end while

if 1=$1 #If there is only one value in the stack
    #That value is the result of the calculation.
    load~ 0,&stackpointer # gr0 is now the result
else
    # Error, user is stupid
    load$ 0,0 #Load 0 to result
end if

# Return to caller
jmp 0,&returnaddr

#=====================================
# Variables

# Stack
# Give us a couple of lines for the stack.
stackstart: sli 0
sli 0
sli 0
sli 0
sli 0
sli 0
sli 0

stackpointer: sli 0

#Used for some ALU tricks
tmp: sli 0

# Input data variables
nextInputLocation: sli 0
inputcount: sli 3
returnaddr: sli 0
