
# HOW TO USE:
# Save start location of input to gr0, start of op-vector at gr1, number of input values to gr2 and return to gr3
# Jump to &evaluate
# The op-vector is a series of zero or non-zero elements. A 1-valued 
#   element implies that the input of the same index represents an operator.
# Result will be put in gr0. See below for a list of modified GRx's
# The routine was unsuccesful if Gr1 > 0 after running it.

# GR usage (after parsing arguments):
# 0-addr to top of stack
# 1-stack size
# 2-Next input token
# 4-tmp value storage
# 6-Tokens remaining
# 7-Next op-vector token

#------------------------------

# Start of code

# Load input data
evaluate: store 0,&nextInputLocation
store 1,&nextIsOpLocation
store 2,&inputcount
store 3,&returnaddr

# Setup
load$ 1,0 # Set stack size to 0
load$ 0,&stackstart # Initialize stack pointer
load 6,&inputcount

while 6>$1 #While there are input tokens left

    # Read the next token from input.
    load~ 2,&nextInputLocation
    # Increment nextInputLocation value; go to next input char
    # TODO: It's faster to just always use GR2 rather than
    #           Reading and writing from &nextInputLocation
    load 4,&nextInputLocation
    add$ 4,1
    store 4,&nextInputLocation

    # Read next is-op token
    load~ 7,&nextIsOpLocation
    #Increment
    load 4,&nextIsOpLocation
    add$ 4,1
    store 4,&nextIsOpLocation


    # Check if token is a number or an operator and jump appropriately
    if 7=$1
       jmp$ 0,&processOperator
    else
       jmp$ 0,&processNumber
    end if

    #---------------------------------
    #     OPERATOR
    #---------------------------------
    #Note: each operator assumes two arguments
    processOperator:if 1<$2 # plus
        # Error, to few values to Evaluate
        load$ 0,0 # Put zero as result
	jmp 0,&returnaddr # Return
    end if

    # We seem to have enough to work with...

    # Load first value from stack to Gr4, stackpointer address to Gr0.
    store 0,&stackpointer
    load~ 4,&stackpointer

    # Find the second argument
    sub$ 0,1 # Decrement stack pointer
    sub$ 1,1 # Decrement stack size
    store 0,&stackpointer #Have &stackpointer point to arg number 2

    # Perform appropriate operation
    # TODO: else-if would be desirable, but not necessary
    if 2=$43 # plus 
       addf~ 4,&stackpointer
    end if
    if 2=$44 # Minus

       # Minus takes order into consideration.
       # Unfortunately, the order the subf instruction does it in
       # Is the reverse of what we need.

       # To solve this, we need to store the second operand in GRx
       # and the first one in program memory.
       store 4,&tmp_rp # Gr4 -> p_mem
       load~ 4,&stackpointer # p_mem (second operande) -> Gr4

       #Perform the operation, now with proper ordering
       subf 4,&tmp_rp

    end if
    if 2=$45 # Mult
       multf~ 4,&stackpointer
    end if
    if 2=$46 #Div
       # Backup grx
       store 0,&gr0backuprp
       store 1,&gr1backuprp
       store 2,&gr2backuprp
       store 3,&gr3backuprp
       store 4,&gr4backuprp
       store 5,&gr5backuprp 
       store 6,&gr6backuprp
       store 7,&gr7backuprp   
       # Save nämnare to gr0, täljare to gr1 and return addr to gr2 before running. Result will be in gr2
       load 1,&gr4backuprp
       load~ 0,&stackpointer
       load$ 2,&returnfromdivision
       jmp$ 0,&divide

returnfromdivision:store 2,&tmp_rp
       load 0,&gr0backuprp
       load 1,&gr1backuprp
       load 2,&gr2backuprp
       load 3,&gr3backuprp
       load 4,&gr4backuprp
       load 5,&gr5backuprp 
       load 6,&gr6backuprp
       load 7,&gr7backuprp
       load 4,&tmp_rp
    end if

    # Save Gr4==result at the point in stack on which the second
    #    arg resided
    # TODO: ~ doesn't work for STORE.
    store~ 4,&stackpointer # Push the returned results to stack

    # Skip number processing
    jmp$ 0,&nextToken
    
    #-------------------------------
    #     NUMBER
    #-------------------------------
    #Not operator, push to stack
    processNumber:add$ 0,1
    add$ 1,1
    store 0,&stackpointer
    store~ 2,&stackpointer
    
    #-------------------------------

    nextToken:sub$ 6,1 # We have read one input token
end while

if 1=$1 #If there is only one value in the stack
    #That value is the result of the calculation.
    load~ 0,&stackpointer # gr0 is now the result
    load$ 1,0 # Gr1 should be 0 if succesful
else
    # Error, user is stupid
    load$ 0,0 #Load 0 to result
end if

# Return to caller
jmp 0,&returnaddr

#=====================================
# Variables

# Stack
# Currently 16-line stack
stackstart: sli 0
sli 0
sli 0
sli 0
sli 0
sli 0
sli 0
sli 0
sli 0
sli 0
sli 0
sli 0
sli 0
sli 0
sli 0
sli 0

stackpointer: sli 0

#Used for some ALU tricks
tmp_rp: sli 0

# Input data variables
nextIsOpLocation: sli 0
nextInputLocation: sli 0
inputcount: sli 3
returnaddr: sli 0
gr0backuprp:sli 0
gr1backuprp:sli 0
gr2backuprp:sli 0
gr3backuprp:sli 0
gr4backuprp:sli 0
gr5backuprp:sli 0
gr6backuprp:sli 0
gr7backuprp:sli 0

include division
